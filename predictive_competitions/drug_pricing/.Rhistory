table(train$End_date_including_extension)
table(train$offer_year)
table(train$start_year)
train$offer_year = sapply(train$offer_year, two_to_four_year)
table(train$offer_year)
head(train, 3)
table(train$offer_month)
setwd('/Users/nickbecker/Documents/Github/machine_learning_prediction/predictive_competitions/drug_pricing/')
train_raw = read.csv('data/CAX_Bidding_TRAIN_Molecule_3_4_5.csv')
test_post_raw = read.csv('data/CAX_Bidding_TEST_Molecule_6_Post_LOE.csv')
test_post_raw = select(test_post_raw, -Winning_price_per_standard_unit)
train_raw = mutate(train_raw, Offer_date = as.character(Offer_date))
glimpse(train_raw)
# fix the dates
train = train_raw %>% separate(Offer_date, c("offer_date", "offer_time"), sep = " ", remove=TRUE, extra = "drop")
train = train %>% separate(offer_date, c("offer_month", "offer_day", "offer_year"), sep = "-", remove = TRUE)
train = train %>% separate(Start_date, c("start_day", "start_month", "start_year"), sep = "-", remove = TRUE)
train = mutate(train,
end_date_year = as.integer(str_sub(End_date_including_extension, -4, -1)),
end_date_month = as.integer(str_sub(End_date_including_extension, -7, -5)))
head(train, 3)
str_sub(train$End_date_including_extension, -7, -5))
str_sub(train$End_date_including_extension, -7, -5)
head(train, 3)
setwd('/Users/nickbecker/Documents/Github/machine_learning_prediction/predictive_competitions/drug_pricing/')
train_raw = read.csv('data/CAX_Bidding_TRAIN_Molecule_3_4_5.csv')
test_post_raw = read.csv('data/CAX_Bidding_TEST_Molecule_6_Post_LOE.csv')
test_post_raw = select(test_post_raw, -Winning_price_per_standard_unit)
train_raw = mutate(train_raw, Offer_date = as.character(Offer_date))
glimpse(train_raw)
# fix the dates
train = train_raw %>% separate(Offer_date, c("offer_date", "offer_time"), sep = " ", remove=TRUE, extra = "drop")
train = train %>% separate(offer_date, c("offer_month", "offer_day", "offer_year"), sep = "-", remove = TRUE)
train = train %>% separate(Start_date, c("start_day", "start_month", "start_year"), sep = "-", remove = TRUE)
train = mutate(train,
end_date_year = as.integer(str_sub(End_date_including_extension, -4, -1)),
end_date_month = as.integer(str_sub(End_date_including_extension, -7, -6)))
head(train, 3)
head(train, 3)
table(train$offer_month)
table(train$offer_day)
table(train$offer_year)
table(train$start_day)
table(train$start_month)
table(train$start_year)
table(train$end_date_year)
table(train$end_date_month)
table(train$offer_month)
table(as.integer(train$offer_month))
table(train$offer_day)
table(train$start_month)
table(train$start_year)
table(train$end_date_year)
table(train$end_date_month)
table(train$offer_day)
table(train$offer_year)
table(train$start_month)
table(train$start_year)
table(train$end_date_year)
table(train$end_date_month)
setwd('/Users/nickbecker/Documents/Github/machine_learning_prediction/predictive_competitions/drug_pricing/')
train_raw = read.csv('data/CAX_Bidding_TRAIN_Molecule_3_4_5.csv')
test_post_raw = read.csv('data/CAX_Bidding_TEST_Molecule_6_Post_LOE.csv')
test_post_raw = select(test_post_raw, -Winning_price_per_standard_unit)
train_raw = mutate(train_raw, Offer_date = as.character(Offer_date))
glimpse(train_raw)
# fix the dates
train = train_raw %>% separate(Offer_date, c("offer_date", "offer_time"), sep = " ", remove=TRUE, extra = "drop")
train = train %>% separate(offer_date, c("offer_month", "offer_day", "offer_year"), sep = "-", remove = TRUE)
train = train %>% separate(Start_date, c("start_day", "start_month", "start_year"), sep = "-", remove = TRUE)
train = mutate(train,
end_date_year = as.integer(str_sub(End_date_including_extension, -4, -1)),
end_date_month = as.integer(str_sub(End_date_including_extension, -7, -6)),
offer_month = as.integer(offer_month),
start_month = as.integer(start_month),
start_year = as.integer(start_year),
end_date_year = as.integer(end_date_year),
end_date_month = as.integer(end_date_month),
head(train, 3)
)
setwd('/Users/nickbecker/Documents/Github/machine_learning_prediction/predictive_competitions/drug_pricing/')
train_raw = read.csv('data/CAX_Bidding_TRAIN_Molecule_3_4_5.csv')
test_post_raw = read.csv('data/CAX_Bidding_TEST_Molecule_6_Post_LOE.csv')
test_post_raw = select(test_post_raw, -Winning_price_per_standard_unit)
train_raw = mutate(train_raw, Offer_date = as.character(Offer_date))
glimpse(train_raw)
# fix the dates
train = train_raw %>% separate(Offer_date, c("offer_date", "offer_time"), sep = " ", remove=TRUE, extra = "drop")
train = train %>% separate(offer_date, c("offer_month", "offer_day", "offer_year"), sep = "-", remove = TRUE)
train = train %>% separate(Start_date, c("start_day", "start_month", "start_year"), sep = "-", remove = TRUE)
train = mutate(train,
end_date_year = as.integer(str_sub(End_date_including_extension, -4, -1)),
end_date_month = as.integer(str_sub(End_date_including_extension, -7, -6)),
offer_month = as.integer(offer_month),
start_month = as.integer(start_month),
start_year = as.integer(start_year),
end_date_year = as.integer(end_date_year),
end_date_month = as.integer(end_date_month))
head(train, 3)
table(train$offer_year)
train$offer_year = sapply(train$offer_year, two_to_four_year)
table(train$offer_year)
glimpse(train)
table(train$start_day)
setwd('/Users/nickbecker/Documents/Github/machine_learning_prediction/predictive_competitions/drug_pricing/')
train_raw = read.csv('data/CAX_Bidding_TRAIN_Molecule_3_4_5.csv')
test_post_raw = read.csv('data/CAX_Bidding_TEST_Molecule_6_Post_LOE.csv')
test_post_raw = select(test_post_raw, -Winning_price_per_standard_unit)
train_raw = mutate(train_raw, Offer_date = as.character(Offer_date))
glimpse(train_raw)
# fix the dates
train = train_raw %>% separate(Offer_date, c("offer_date", "offer_time"), sep = " ", remove=TRUE, extra = "drop")
train = train %>% separate(offer_date, c("offer_month", "offer_day", "offer_year"), sep = "-", remove = TRUE)
train = train %>% separate(Start_date, c("start_day", "start_month", "start_year"), sep = "-", remove = TRUE)
train = mutate(train,
end_date_year = as.integer(str_sub(End_date_including_extension, -4, -1)),
end_date_month = as.integer(str_sub(End_date_including_extension, -7, -6)),
offer_month = as.integer(offer_month),
start_month = as.integer(start_month),
start_year = as.integer(start_year),
start_day = as.integer(start_day),
end_date_year = as.integer(end_date_year),
end_date_month = as.integer(end_date_month))
head(train, 3)
table(train$offer_day)
table(train$offer_year)
table(train$start_month)
table(train$start_day)
table(train$start_year)
table(train$end_date_year)
table(train$end_date_month)
# Function to fix the years
two_to_four_year <- function(x){
temp <- as.integer(x)
temp <- ifelse(temp > temp %% 100, temp, 2000+temp)
return(temp)
}
train$offer_year = sapply(train$offer_year, two_to_four_year)
glimpse(train)
table(train$offer_day)
setwd('/Users/nickbecker/Documents/Github/machine_learning_prediction/predictive_competitions/drug_pricing/')
train_raw = read.csv('data/CAX_Bidding_TRAIN_Molecule_3_4_5.csv')
test_post_raw = read.csv('data/CAX_Bidding_TEST_Molecule_6_Post_LOE.csv')
test_post_raw = select(test_post_raw, -Winning_price_per_standard_unit)
train_raw = mutate(train_raw, Offer_date = as.character(Offer_date))
glimpse(train_raw)
# fix the dates
train = train_raw %>% separate(Offer_date, c("offer_date", "offer_time"), sep = " ", remove=TRUE, extra = "drop")
train = train %>% separate(offer_date, c("offer_month", "offer_day", "offer_year"), sep = "-", remove = TRUE)
train = train %>% separate(Start_date, c("start_day", "start_month", "start_year"), sep = "-", remove = TRUE)
train = mutate(train,
end_date_year = as.integer(str_sub(End_date_including_extension, -4, -1)),
end_date_month = as.integer(str_sub(End_date_including_extension, -7, -6)),
offer_month = as.integer(offer_month),
offer_day = as.integer(offer_day),
start_month = as.integer(start_month),
start_year = as.integer(start_year),
start_day = as.integer(start_day),
end_date_year = as.integer(end_date_year),
end_date_month = as.integer(end_date_month))
head(train, 3)
table(train$offer_day)
table(train$offer_year)
table(train$start_month)
table(train$start_day)
table(train$start_year)
table(train$end_date_year)
table(train$end_date_month)
# Function to fix the years
two_to_four_year <- function(x){
temp <- as.integer(x)
temp <- ifelse(temp > temp %% 100, temp, 2000+temp)
return(temp)
}
train$offer_year = sapply(train$offer_year, two_to_four_year)
glimpse(train)
str(train)
setwd('/Users/nickbecker/Documents/Github/machine_learning_prediction/predictive_competitions/drug_pricing/')
train_raw = read.csv('data/CAX_Bidding_TRAIN_Molecule_3_4_5.csv')
test_post_raw = read.csv('data/CAX_Bidding_TEST_Molecule_6_Post_LOE.csv')
test_post_raw = select(test_post_raw, -Winning_price_per_standard_unit)
train_raw = mutate(train_raw, Offer_date = as.character(Offer_date))
glimpse(train_raw)
# fix the dates
train = train_raw %>% separate(Offer_date, c("offer_date", "offer_time"), sep = " ", remove=TRUE, extra = "drop")
train = train %>% separate(offer_date, c("offer_month", "offer_day", "offer_year"), sep = "-", remove = TRUE)
train = train %>% separate(Start_date, c("start_day", "start_month", "start_year"), sep = "-", remove = TRUE)
train = mutate(train,
end_date_year = as.integer(str_sub(End_date_including_extension, -4, -1)),
end_date_month = as.integer(str_sub(End_date_including_extension, -7, -6)),
offer_month = as.integer(offer_month),
offer_day = as.integer(offer_day),
start_month = as.integer(start_month),
start_year = as.integer(start_year),
start_day = as.integer(start_day),
end_date_year = as.integer(end_date_year),
end_date_month = as.integer(end_date_month))
head(train, 3)
table(train$offer_day)
table(train$offer_year)
table(train$start_month)
table(train$start_day)
table(train$start_year)
table(train$end_date_year)
table(train$end_date_month)
# Function to fix the years
two_to_four_year <- function(x){
temp <- as.integer(x)
temp <- ifelse(temp > temp %% 100, temp, 2000+temp)
return(temp)
}
train$offer_year = sapply(train$offer_year, two_to_four_year)
glimpse(train)
str(train)
# take a subset of the training features
train_subset = select(train,
Account:offer_year, start_day:start_year,
Length_of_contract_in_Months:Winning_Company,
end_date_year:end_date_month)
train_subset = na.omit(train_subset)
gbm1
summary(gbm1)
gbm1
colnames(train_subset)
# model parameters
fitControl = trainControl(method = "cv",
number = 10,
verboseIter = TRUE)
gbmGrid = expand.grid(interaction.depth = c(1:7),
n.trees = 300,
shrinkage = c(0.01),
n.minobsinnode = c(5, 10, 15, 20))
# fit a gbm to predict winning price per standard unit
set.seed(12)
gbm1 = train(x=train_subset[, -c(14)],
y=train_subset[, 14],
method = "gbm",
tuneGrid = gbmGrid,
trControl = fitControl)
gbm1
colnames(train_subset)[14]
# fit a logistic regression
logit_fit = train(train_subset[, -c(14)],
y=train_subset[, 14],
method = "glm", family = "binomial",
tuneGrid = gbmGrid,
trControl = fitControl)
logit_fit
logit_fit = train(train_subset[, -c(14)],
y=train_subset[, 14],
method = "glm",
family = "binomial")
warnings()
# fit a logistic regression
logit_fit = train(train_subset[, -c(14)],
y=train_subset[, 14],
method = "glm",
family = "binomial",
trControl = fitControl)
# model parameters
fitControl = trainControl(method = "cv",
number = 10)
# fit a logistic regression
logit_fit = train(train_subset[, -c(14)],
y=train_subset[, 14],
method = "glm",
family = "binomial",
trControl = fitControl)
logit_fit
# model parameters
fitControl = trainControl(method = "cv",
number = 10,
verboseIter = TRUE)
# fit a logistic regression
logit_fit = train(train_subset[, -c(14)],
y=train_subset[, 14],
method = "glm",
family = "binomial",
trControl = fitControl)
# fit a logistic regression
logit_fit = train(train_subset[, -c(14)],
y=train_subset[, 14],
method = "lm",
# family = "binomial",
trControl = fitControl)
logit_fit
warnings()
glimpse(test_post_raw)
test_post_raw = mutate(test_post_raw, Offer_date = as.character(Offer_date))
glimpse(test_post_raw)
test = test_post_raw %>% separate(Offer_date, c("offer_date", "offer_time"), sep = " ", remove=TRUE, extra = "drop")
test = test %>% separate(offer_date, c("offer_month", "offer_day", "offer_year"), sep = "-", remove = TRUE)
test = test %>% separate(Start_date, c("start_day", "start_month", "start_year"), sep = "-", remove = TRUE)
test = mutate(test,
end_date_year = as.integer(str_sub(End_date_including_extension, -4, -1)),
end_date_month = as.integer(str_sub(End_date_including_extension, -7, -6)),
offer_month = as.integer(offer_month),
offer_day = as.integer(offer_day),
start_month = as.integer(start_month),
start_year = as.integer(start_year),
start_day = as.integer(start_day),
end_date_year = as.integer(end_date_year),
end_date_month = as.integer(end_date_month))
head(test, 3)
test$offer_year = sapply(test$offer_year, two_to_four_year)
glimpse(test)
colnames(test)
setwd('/Users/nickbecker/Documents/Github/machine_learning_prediction/predictive_competitions/drug_pricing/')
train_raw = read.csv('data/CAX_Bidding_TRAIN_Molecule_3_4_5.csv')
test_post_raw = read.csv('data/CAX_Bidding_TEST_Molecule_6_Post_LOE.csv')
#test_post_raw = select(test_post_raw, -Winning_price_per_standard_unit)
######### Feature Engineering ########
#### Train Data
train_raw = mutate(train_raw, Offer_date = as.character(Offer_date))
glimpse(train_raw)
# fix the dates
train = train_raw %>% separate(Offer_date, c("offer_date", "offer_time"), sep = " ", remove=TRUE, extra = "drop")
train = train %>% separate(offer_date, c("offer_month", "offer_day", "offer_year"), sep = "-", remove = TRUE)
train = train %>% separate(Start_date, c("start_day", "start_month", "start_year"), sep = "-", remove = TRUE)
train = mutate(train,
end_date_year = as.integer(str_sub(End_date_including_extension, -4, -1)),
end_date_month = as.integer(str_sub(End_date_including_extension, -7, -6)),
offer_month = as.integer(offer_month),
offer_day = as.integer(offer_day),
start_month = as.integer(start_month),
start_year = as.integer(start_year),
start_day = as.integer(start_day),
end_date_year = as.integer(end_date_year),
end_date_month = as.integer(end_date_month))
head(train, 3)
table(train$offer_day)
table(train$offer_year)
table(train$start_month)
table(train$start_day)
table(train$start_year)
table(train$end_date_year)
table(train$end_date_month)
# Function to fix the years
two_to_four_year <- function(x){
temp <- as.integer(x)
temp <- ifelse(temp > temp %% 100, temp, 2000+temp)
return(temp)
}
train$offer_year = sapply(train$offer_year, two_to_four_year)
### Test Data
test_post_raw = mutate(test_post_raw, Offer_date = as.character(Offer_date))
glimpse(test_post_raw)
# fix the dates
test = test_post_raw %>% separate(Offer_date, c("offer_date", "offer_time"), sep = " ", remove=TRUE, extra = "drop")
test = test %>% separate(offer_date, c("offer_month", "offer_day", "offer_year"), sep = "-", remove = TRUE)
test = test %>% separate(Start_date, c("start_day", "start_month", "start_year"), sep = "-", remove = TRUE)
test = mutate(test,
end_date_year = as.integer(str_sub(End_date_including_extension, -4, -1)),
end_date_month = as.integer(str_sub(End_date_including_extension, -7, -6)),
offer_month = as.integer(offer_month),
offer_day = as.integer(offer_day),
start_month = as.integer(start_month),
start_year = as.integer(start_year),
start_day = as.integer(start_day),
end_date_year = as.integer(end_date_year),
end_date_month = as.integer(end_date_month))
head(test, 3)
test$offer_year = sapply(test$offer_year, two_to_four_year)
glimpse(test)
colnames(test)
test[, -c(17)]
str(test[, -c(17)])
?predict
gbm1_preds = predict(gbm1, test[, -c(17)])
glimpse(test)
summary(test)
setwd('/Users/nickbecker/Documents/Github/machine_learning_prediction/predictive_competitions/drug_pricing/')
train_raw = read.csv('data/CAX_Bidding_TRAIN_Molecule_3_4_5.csv')
test_post_raw = read.csv('data/CAX_Bidding_TEST_Molecule_6_Post_LOE.csv')
test_post_raw = select(test_post_raw, -Winning_price_per_standard_unit)
######### Feature Engineering ########
#### Train Data
train_raw = mutate(train_raw, Offer_date = as.character(Offer_date))
glimpse(train_raw)
# fix the dates
train = train_raw %>% separate(Offer_date, c("offer_date", "offer_time"), sep = " ", remove=TRUE, extra = "drop")
train = train %>% separate(offer_date, c("offer_month", "offer_day", "offer_year"), sep = "-", remove = TRUE)
train = train %>% separate(Start_date, c("start_day", "start_month", "start_year"), sep = "-", remove = TRUE)
train = mutate(train,
end_date_year = as.integer(str_sub(End_date_including_extension, -4, -1)),
end_date_month = as.integer(str_sub(End_date_including_extension, -7, -6)),
offer_month = as.integer(offer_month),
offer_day = as.integer(offer_day),
start_month = as.integer(start_month),
start_year = as.integer(start_year),
start_day = as.integer(start_day),
end_date_year = as.integer(end_date_year),
end_date_month = as.integer(end_date_month))
head(train, 3)
table(train$offer_day)
table(train$offer_year)
table(train$start_month)
table(train$start_day)
table(train$start_year)
table(train$end_date_year)
table(train$end_date_month)
# Function to fix the years
two_to_four_year <- function(x){
temp <- as.integer(x)
temp <- ifelse(temp > temp %% 100, temp, 2000+temp)
return(temp)
}
train$offer_year = sapply(train$offer_year, two_to_four_year)
### Test Data
test_post_raw = mutate(test_post_raw, Offer_date = as.character(Offer_date))
glimpse(test_post_raw)
# fix the dates
test = test_post_raw %>% separate(Offer_date, c("offer_date", "offer_time"), sep = " ", remove=TRUE, extra = "drop")
test = test %>% separate(offer_date, c("offer_month", "offer_day", "offer_year"), sep = "-", remove = TRUE)
test = test %>% separate(Start_date, c("start_day", "start_month", "start_year"), sep = "-", remove = TRUE)
test = mutate(test,
end_date_year = as.integer(str_sub(End_date_including_extension, -4, -1)),
end_date_month = as.integer(str_sub(End_date_including_extension, -7, -6)),
offer_month = as.integer(offer_month),
offer_day = as.integer(offer_day),
start_month = as.integer(start_month),
start_year = as.integer(start_year),
start_day = as.integer(start_day),
end_date_year = as.integer(end_date_year),
end_date_month = as.integer(end_date_month))
head(test, 3)
test$offer_year = sapply(test$offer_year, two_to_four_year)
glimpse(test)
# take a subset of the training features
train_subset = select(train,
Account:offer_year, start_day:start_year,
Length_of_contract_in_Months:Winning_Company,
end_date_year:end_date_month)
train_subset = na.omit(train_subset)
colnames(train_subset)
# model parameters
fitControl = trainControl(method = "cv",
number = 10,
verboseIter = TRUE)
gbmGrid = expand.grid(interaction.depth = c(1:7),
n.trees = 300,
shrinkage = c(0.01),
n.minobsinnode = c(5, 10, 15, 20))
# fit a gbm to predict winning price per standard unit
set.seed(12)
gbm1 = train(x=train_subset[, -c(14)],
y=train_subset[, 14],
method = "gbm",
tuneGrid = gbmGrid,
trControl = fitControl)
gbm1
colnames(test)
gbm1_preds = predict(gbm1, test)
glimpse(test_post_raw)
# fit a gbm to predict winning price per standard unit
set.seed(102)
gbm1 = train(x=train_subset[, -c(14)],
y=train_subset[, 14],
method = "gbm",
tuneGrid = gbmGrid,
trControl = fitControl)
gbm1
colnames(test)
gbm1_preds = predict(gbm1, test)
?model.matrix
glimpse(train)
str(tain)
str(train)
model.matrix(~Tender_Type, train)
head(model.matrix(~Tender_Type, train))
str(train)
head(model.matrix(~Tender_Type + Presentation , train))
dummies <- dummyVars(Tender_Type + Presentation, data = train)
dummies <- dummyVars(~Tender_Type + Presentation, data = train)
head(predict(dummies, newdata = train))
head(train)
head(predict(dummies, newdata = train))
str(train)
dummies <- dummyVars(~ Account + Province + Region + Tender_Type + Market +
Molecule + Winning_Product + Winning_Company, data = train)
head(predict(dummies, newdata = train))
head(model.matrix(~ Account + Province + Region + Tender_Type + Market +
Molecule + Winning_Product + Winning_Company, train))
str(train)
head(model.matrix(~ Account + Province + Region + Tender_Type + Market +
Molecule + Winning_Product + Winning_Company + offer_month, train))
head(model.matrix(~ ., train))
train_numeric = cbind()
head(model.matrix(~ ., train))
str(train)
head(model.matrix(~ ., train_subset))
data.frame(model.matrix(~ Account + Province + Region + Tender_Type + Market +
Molecule + Winning_Product + Winning_Company + offer_month, train)))
data.frame(model.matrix(~ Account + Province + Region + Tender_Type + Market +
Molecule + Winning_Product + Winning_Company + offer_month, train))
train_subset_numeric = data.frame(model.matrix(~ Account + Province + Region + Tender_Type + Market +
Molecule + Winning_Product + Winning_Company + offer_month, train))
head(train_subset_numeric)
train_subset_numeric = data.frame(model.matrix(~ ., train))
train_subset_numeric = data.frame(model.matrix(~ ., train_subset))
head(train_subset_numeric)
table(train$Market)
table(test$Market)
colnames(train_subset_numeric)
test_numeric = data.frame(model.matrix(~ ., test))
test_subset = select(test,
Account:offer_year, start_day:start_year,
Length_of_contract_in_Months:Winning_Company,
end_date_year:end_date_month)
test_numeric = data.frame(model.matrix(~ ., test_subset))
str(test_subset)
table(train$Molecule)
